name: "Deploy Helix Package"
description: "Builds and publishes a new version of a HELIX Package"

inputs:
  access_token:
    description: "Access token for authentication. Can be generated on the HELIX Hub: Account -> Access Tokens."
    required: true
  create:
    description: "Create package if it doesn't exist"
    required: false
  package_name:
    description: 'Name of the package'
    required: false
  master_endpoint:
    description: "Endpoint to use for the API. Defaults to https://api.helixgame.com."
    required: false
    default: "https://api.helixgame.com"
  path:
    description: "Path to the package folder to upload."
    required: false
    default: "."
  package_type:
    description: 'Possible types map gamemode script'
    required: false
  description:
    description: 'Description of the package'
    required: false

outputs: {}

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install jq
      shell: bash
      run: sudo apt-get install -y jq

    - name: Create Package 
      id: create_package
      if: ${{ inputs.create == 'true' }}
      shell: bash
      env:
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
        PACKAGE_NAME: ${{ inputs.package_name }}
        PACKAGE_TYPE: ${{ inputs.package_type }}
        DESCRIPTION: ${{ inputs.description }}
      run: |
        RANDOM_DESCRIPTION=$(head /dev/urandom | base32 | head -c 16)
        RANDOM_TITLE=$(head /dev/urandom | base32 | head -c 16)
        RANDOM_TITLE=${RANDOM_TITLE,,}
        [[ -z "$PACKAGE_NAME" ]] && PACKAGE_NAME=$RANDOM_TITLE
        [[ -z "$DESCRIPTION" ]] && DESCRIPTION=$RANDOM_DESCRIPTION
        json_payload="{"
        [ ! -z "$PACKAGE_NAME" ] && json_payload+="\"name\": \"$PACKAGE_NAME\","
        [ ! -z "$DESCRIPTION" ] && json_payload+="\"description\": \"$DESCRIPTION\","
        json_payload=$(echo "$json_payload" | sed 's/,$//')"}"
        echo "Generated JSON Payload: $json_payload"
        response=$(curl --no-progress-meter -X POST --location "${MASTER_ENDPOINT}/v1/packages" --header 'Content-Type: application/json' --header "Token: ${ACCESS_TOKEN}" --data "$json_payload")
        echo $response
        echo "package_id=$(echo $response | jq -r '.payload.id')" >> $GITHUB_OUTPUT
        echo "package_name=$(echo $response | jq -r '.payload.name')" >> $GITHUB_OUTPUT

    - name: Zip repository
      shell: bash
      env:
        PACKAGE_NAME: ${{ inputs.package_name || steps.create_package.outputs.package_name }}
        PACKAGE_PATH: ${{ inputs.path }}
      run: |
        mkdir -p $PACKAGE_NAME
        cp $PACKAGE_PATH/Package.toml $PACKAGE_NAME/
        mkdir -p $PACKAGE_PATH/Client && cp -r $PACKAGE_PATH/Client $PACKAGE_NAME/
        mkdir -p $PACKAGE_PATH/Server && cp -r $PACKAGE_PATH/Server $PACKAGE_NAME/
        mkdir -p $PACKAGE_PATH/Shared && cp -r $PACKAGE_PATH/Shared $PACKAGE_NAME/

        zip -r main.zip $PACKAGE_NAME

    - name: Request presigned URL
      id: presigned_url
      shell: bash
      env:
        PACKAGE_NAME: ${{ inputs.package_name || steps.create_package.outputs.package_name }}
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
      run: |
        response=$(curl --location "${MASTER_ENDPOINT}/v1/packages/upload/${PACKAGE_NAME}" \
          --header "Token: ${ACCESS_TOKEN}")
        echo "Response: $response"
        code=$(echo $response | jq -r '.code')
        message=$(echo $response | jq -r '.message')
        if [ "$code" != "0" ]; then
          if [ "$message" == "package corrupted" ]; then
            echo "Error: Make sure you've created this package on the HELIX Hub first: https://hub.helixgame.com/creations/packages"
          else
            echo "Error: Server returned error code $code with message '$message'"
          fi
          exit 1
        fi
        upload_url=$(echo $response | jq -r '.payload.upload_url')
        package_url=$(echo $response | jq -r '.payload.package_url')
        echo "upload_url=$upload_url" >> $GITHUB_ENV
        echo "package_url=$package_url" >> $GITHUB_ENV
        echo "upload_url=$upload_url"
        echo "package_url=$package_url"

    - name: Upload zip file
      shell: bash
      env:
        UPLOAD_URL: ${{ env.upload_url }}
      run: |
        echo "Uploading to: ${UPLOAD_URL}"
        curl --location --request PUT "${UPLOAD_URL}" \
          --header "Content-Type: application/zip" \
          --data-binary "@main.zip"

    - name: Finish upload
      shell: bash
      env:
        PACKAGE_NAME: ${{ inputs.package_name }}
        ACCESS_TOKEN: ${{ inputs.access_token }}
        MASTER_ENDPOINT: ${{ inputs.master_endpoint }}
        PACKAGE_URL: ${{ env.package_url }}
      run: |
        curl --location "${MASTER_ENDPOINT}/v1/packages/upload/finish" \
          --header "Content-Type: application/json" \
          --header "Token: ${ACCESS_TOKEN}" \
          --data "{\"url\": \"${PACKAGE_URL}\",\"name\": \"${PACKAGE_NAME}\"}"
